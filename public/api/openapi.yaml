openapi: 3.0.3
info:
  title: ContentPilot Agent API
  description: |
    ContentPilot is an intelligent content discovery, generation, and newsletter automation agent designed for integration with Maya (central agent) and other multi-agent systems.
    
    ## Features
    - **Content Discovery**: Intelligent web crawling and content aggregation
    - **Content Generation**: AI-powered article creation with quality scoring
    - **Newsletter Management**: Automated newsletter queue and distribution
    - **Automation & Scheduling**: Configurable content workflows with cron scheduling
    - **Human Oversight**: Low-confidence flagging and escalation system
    - **Memory System**: Semantic, episodic, and working memory capabilities
    - **Job Tracking**: Asynchronous operation monitoring with progress tracking
    - **Webhook Notifications**: Real-time event notifications for Maya integration
    
    ## Authentication
    All endpoints require API key authentication via the `x-api-key` header or `Authorization: Bearer <token>` header.
    
  version: 1.0.0
  contact:
    name: ContentPilot Support
    url: https://github.com/contentpilot/api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://your-domain.com/api/contentpilot
    description: Production server
  - url: http://localhost:3000/api/contentpilot
    description: Development server

security:
  - ApiKeyAuth: []
  - BearerAuth: []

paths:
  /agent:
    get:
      summary: Get agent health and status
      description: Returns comprehensive health information, statistics, and monitoring data
      tags:
        - Agent Management
      responses:
        '200':
          description: Agent status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Execute agent actions
      description: Trigger various agent operations like intelligence gathering, newsletter sending, etc.
      tags:
        - Agent Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentAction'
      responses:
        '200':
          description: Action executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /capabilities:
    get:
      summary: Get agent capabilities
      description: Returns detailed information about agent capabilities, supported actions, and data models
      tags:
        - Agent Management
      responses:
        '200':
          description: Capabilities retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCapabilities'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /register:
    post:
      summary: Register agent with Maya
      description: Self-register the agent with Maya central system
      tags:
        - Agent Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '207':
          description: Partial success (stored locally but Maya registration failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    get:
      summary: Check registration status
      description: Get current registration status with Maya
      tags:
        - Agent Management
      responses:
        '200':
          description: Registration status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /articles:
    get:
      summary: List articles
      description: Get articles with optional filtering by date, status, topics, and search
      tags:
        - Content Management
      parameters:
        - name: date
          in: query
          description: Filter by specific date (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Filter by article status
          schema:
            $ref: '#/components/schemas/ArticleStatus'
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
        - name: topics
          in: query
          description: Filter by topics (comma-separated)
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of articles to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of articles to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Articles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create new article
      description: Create a new article with optional email notification
      tags:
        - Content Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArticleRequest'
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /articles/{id}:
    put:
      summary: Update article
      description: Update an existing article
      tags:
        - Content Management
      parameters:
        - name: id
          in: path
          required: true
          description: Article ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArticleRequest'
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /articles/{id}/newsletter:
    put:
      summary: Toggle article newsletter queue status
      description: Add or remove article from newsletter queue
      tags:
        - Content Management
      parameters:
        - name: id
          in: path
          required: true
          description: Article ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                inNewsletterQueue:
                  type: boolean
                  description: Whether to add (true) or remove (false) from newsletter queue
              required:
                - inNewsletterQueue
      responses:
        '200':
          description: Newsletter queue status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /intelligence:
    post:
      summary: Trigger intelligence gathering
      description: Start content discovery and generation process
      tags:
        - Intelligence
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntelligenceRequest'
      responses:
        '200':
          description: Intelligence gathering started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntelligenceResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /memory:
    get:
      summary: Query memory system
      description: Search and retrieve information from agent memory
      tags:
        - Memory
      parameters:
        - name: query
          in: query
          description: Search query
          schema:
            type: string
        - name: type
          in: query
          description: Memory type to search
          schema:
            type: string
            enum: [semantic, episodic, working, all]
            default: all
        - name: limit
          in: query
          description: Maximum results to return
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Memory query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryQueryResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Store memory entry
      description: Store new information in agent memory
      tags:
        - Memory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryStoreRequest'
      responses:
        '200':
          description: Memory stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryStoreResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /jobs:
    get:
      summary: List jobs
      description: Get job status with filtering and pagination
      tags:
        - Job Management
      parameters:
        - name: status
          in: query
          description: Filter by job status
          schema:
            $ref: '#/components/schemas/JobStatus'
        - name: type
          in: query
          description: Filter by job type
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum jobs to return
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of jobs to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create or update job
      description: Create new job or update existing job status
      tags:
        - Job Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobRequest'
      responses:
        '200':
          description: Job operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /jobs/{id}:
    get:
      summary: Get job status
      description: Get detailed status of a specific job
      tags:
        - Job Management
      parameters:
        - name: id
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        '200':
          description: Job status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update job
      description: Update job status and progress
      tags:
        - Job Management
      parameters:
        - name: id
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdate'
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Cancel or delete job
      description: Cancel running job or delete completed job
      tags:
        - Job Management
      parameters:
        - name: id
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        '200':
          description: Job cancelled or deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /webhook:
    get:
      summary: Get webhook configuration
      description: Retrieve current webhook settings and supported events
      tags:
        - Webhook
      responses:
        '200':
          description: Webhook configuration retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookConfigResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Configure webhook
      description: Set up or test webhook endpoint
      tags:
        - Webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Webhook configured or tested successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Remove webhook configuration
      description: Delete webhook configuration
      tags:
        - Webhook
      responses:
        '200':
          description: Webhook configuration removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /escalation:
    get:
      summary: List escalations
      description: Get escalations requiring human attention
      tags:
        - Escalation
      parameters:
        - name: status
          in: query
          description: Filter by escalation status
          schema:
            $ref: '#/components/schemas/EscalationStatus'
        - name: type
          in: query
          description: Filter by escalation type
          schema:
            $ref: '#/components/schemas/EscalationType'
        - name: priority
          in: query
          description: Filter by priority level
          schema:
            $ref: '#/components/schemas/Priority'
        - name: limit
          in: query
          description: Maximum escalations to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of escalations to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Escalations retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create escalation
      description: Create new escalation for human attention
      tags:
        - Escalation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEscalationRequest'
      responses:
        '200':
          description: Escalation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update escalation
      description: Update escalation status and resolution
      tags:
        - Escalation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEscalationRequest'
      responses:
        '200':
          description: Escalation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EscalationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api-keys:
    get:
      summary: List API keys
      description: Get list of API keys (admin only)
      tags:
        - API Keys
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create API key
      description: Generate new API key
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete API key
      description: Revoke an API key
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keyId:
                  type: string
                  description: API key ID to delete
              required:
                - keyId
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key for authentication
    BearerAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication

  schemas:
    ArticleStatus:
      type: string
      enum: [DRAFT, PUBLISHED, ARCHIVED]
      description: Article publication status

    JobStatus:
      type: string
      enum: [pending, running, completed, failed, cancelled]
      description: Job execution status

    EscalationStatus:
      type: string
      enum: [pending, in_review, resolved, dismissed]
      description: Escalation resolution status

    EscalationType:
      type: string
      enum: [low_confidence, error, review_required, quality_concern, manual_intervention]
      description: Type of escalation

    Priority:
      type: string
      enum: [low, medium, high, critical]
      description: Priority level

    Article:
      type: object
      properties:
        id:
          type: string
          description: Unique article identifier
        title:
          type: string
          description: Article title
        content:
          type: string
          description: Full article content
        tldr:
          type: string
          description: Article summary/TL;DR
        topics:
          type: array
          items:
            type: string
          description: Article topics/tags
        status:
          $ref: '#/components/schemas/ArticleStatus'
        inNewsletterQueue:
          type: boolean
          description: Whether article is in newsletter queue
        sourceUrl:
          type: string
          nullable: true
          description: Original source URL
        sourceName:
          type: string
          nullable: true
          description: Original source name
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - title
        - content
        - tldr
        - topics
        - status
        - inNewsletterQueue
        - createdAt
        - updatedAt

    AgentStatus:
      type: object
      properties:
        status:
          type: string
          enum: [active, error]
          description: Agent operational status
        health_score:
          type: number
          minimum: 0
          maximum: 100
          description: Overall health score (0-100)
        timestamp:
          type: string
          format: date-time
          description: Status check timestamp
        uptime:
          type: object
          properties:
            ms:
              type: number
              description: Uptime in milliseconds
            human:
              type: string
              description: Human-readable uptime
            started_at:
              type: string
              format: date-time
              description: Agent start time
        stats:
          type: object
          properties:
            totalArticles:
              type: integer
              description: Total number of articles
            articlesInQueue:
              type: integer
              description: Articles in newsletter queue
            totalSources:
              type: integer
              description: Total content sources
            totalSubscribers:
              type: integer
              description: Total newsletter subscribers
            lastIntelligenceGather:
              type: string
              format: date-time
              nullable: true
              description: Last intelligence gathering timestamp
        automation:
          type: object
          properties:
            enabled:
              type: boolean
              description: Whether automation is enabled
            schedule:
              type: string
              nullable: true
              description: Cron schedule expression
            nextRun:
              type: string
              format: date-time
              nullable: true
              description: Next scheduled run time
        webhook:
          type: object
          properties:
            configured:
              type: boolean
              description: Whether webhook is configured
            active:
              type: boolean
              description: Whether webhook is active
            events:
              type: integer
              description: Number of configured events
            url:
              type: string
              description: Webhook URL (credentials masked)
        monitoring:
          type: object
          properties:
            errors:
              type: object
              properties:
                recent_count:
                  type: integer
                  description: Recent error count
                last_24h:
                  type: integer
                  description: Errors in last 24 hours
            warnings:
              type: object
              properties:
                active:
                  type: array
                  items:
                    type: string
                  description: Active warning messages
                count:
                  type: integer
                  description: Number of active warnings
            performance:
              type: object
              properties:
                memory_usage:
                  type: object
                  description: Memory usage statistics
                uptime_percentage:
                  type: number
                  description: Uptime percentage
        capabilities:
          type: object
          properties:
            version:
              type: string
              description: Agent version
            features:
              type: array
              items:
                type: string
              description: Available features

    AgentAction:
      type: object
      properties:
        action:
          type: string
          enum: [trigger_intelligence, get_newsletter_queue, send_newsletter, update_automation]
          description: Action to execute
        payload:
          type: object
          description: Action-specific parameters
      required:
        - action

    ActionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether action was successful
        action:
          type: string
          description: Action that was executed
        result:
          type: object
          description: Action result data
      required:
        - success
        - action

    AgentCapabilities:
      type: object
      properties:
        agent:
          type: object
          properties:
            name:
              type: string
            version:
              type: string
            type:
              type: string
            description:
              type: string
        capabilities:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              actions:
                type: array
                items:
                  type: string
              inputs:
                type: array
                items:
                  type: string
              outputs:
                type: array
                items:
                  type: string
        endpoints:
          type: object
          additionalProperties:
            type: string
        supported_actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
              description:
                type: string
              method:
                type: string
              endpoint:
                type: string
              payload:
                type: object
              response:
                type: object

    RegistrationRequest:
      type: object
      properties:
        mayaEndpoint:
          type: string
          format: uri
          description: Maya central agent endpoint URL
        registrationToken:
          type: string
          description: Optional registration token for Maya
      required:
        - mayaEndpoint

    RegistrationResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether registration was successful
        message:
          type: string
          description: Registration result message
        agentInfo:
          type: object
          description: Agent information sent to Maya
        mayaResponse:
          type: object
          description: Response from Maya (if successful)
        registeredAt:
          type: string
          format: date-time
          description: Registration timestamp
        error:
          type: string
          description: Error message (if failed)

    RegistrationStatus:
      type: object
      properties:
        registered:
          type: boolean
          description: Whether agent is registered with Maya
        status:
          type: string
          enum: [registered, failed]
          description: Registration status
        registeredAt:
          type: string
          format: date-time
          description: Registration timestamp
        mayaEndpoint:
          type: string
          format: uri
          description: Maya endpoint URL
        agentInfo:
          type: object
          description: Agent information
        error:
          type: string
          nullable: true
          description: Error message if registration failed

    ArticleListResponse:
      type: object
      properties:
        success:
          type: boolean
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        pagination:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer
            has_more:
              type: boolean
        filters:
          type: object
          properties:
            date:
              type: string
              nullable: true
            status:
              type: string
              nullable: true
            search:
              type: string
              nullable: true
            topics:
              type: string
              nullable: true

    CreateArticleRequest:
      type: object
      properties:
        title:
          type: string
          description: Article title
        content:
          type: string
          description: Article content
        tldr:
          type: string
          description: Article summary
        topics:
          type: array
          items:
            type: string
          description: Article topics
        status:
          $ref: '#/components/schemas/ArticleStatus'
        sourceUrl:
          type: string
          description: Source URL
        sourceName:
          type: string
          description: Source name
        sendNotification:
          type: boolean
          default: false
          description: Whether to send email notification
      required:
        - title
        - content
        - tldr
        - topics

    UpdateArticleRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        tldr:
          type: string
        topics:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/ArticleStatus'

    IntelligenceRequest:
      type: object
      properties:
        sources:
          type: array
          items:
            type: string
          description: Specific sources to crawl
        topics:
          type: array
          items:
            type: string
          description: Topics to focus on
        limit:
          type: integer
          description: Maximum articles to generate
        sendEmailSummary:
          type: boolean
          default: true
          description: Whether to send email summary

    IntelligenceResponse:
      type: object
      properties:
        success:
          type: boolean
        briefingId:
          type: string
          description: Intelligence briefing ID
        message:
          type: string
        estimatedCompletion:
          type: string
          format: date-time
          description: Estimated completion time

    MemoryQueryResponse:
      type: object
      properties:
        success:
          type: boolean
        query:
          type: string
        type:
          type: string
        limit:
          type: integer
        offset:
          type: integer
        total_categories:
          type: integer
        memory:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              category:
                type: string
              count:
                type: integer
              data:
                type: array
                items:
                  type: object
        capabilities:
          type: object
        timestamp:
          type: string
          format: date-time

    MemoryStoreRequest:
      type: object
      properties:
        type:
          type: string
          enum: [semantic, episodic, working]
          description: Memory type
        category:
          type: string
          description: Memory category
        content:
          type: object
          description: Memory content
        metadata:
          type: object
          description: Additional metadata
      required:
        - type
        - category
        - content

    MemoryStoreResponse:
      type: object
      properties:
        success:
          type: boolean
        memory_id:
          type: string
        message:
          type: string
        entry:
          type: object
        note:
          type: string

    JobListResponse:
      type: object
      properties:
        success:
          type: boolean
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        pagination:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer
            has_more:
              type: boolean
        stats:
          type: object
          properties:
            total:
              type: integer
            pending:
              type: integer
            running:
              type: integer
            completed:
              type: integer
            failed:
              type: integer
            cancelled:
              type: integer
        filters:
          type: object

    Job:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
        progress:
          type: number
          minimum: 0
          maximum: 100
        data:
          type: object
        result:
          type: object
        error:
          type: string
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        estimatedDuration:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    JobRequest:
      type: object
      properties:
        action:
          type: string
          enum: [create, update]
        job_id:
          type: string
          description: Required for update action
        type:
          type: string
          description: Required for create action
        data:
          type: object
          description: Job data for create action
      required:
        - action

    JobResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
        message:
          type: string

    JobDetailResponse:
      type: object
      properties:
        job:
          $ref: '#/components/schemas/Job'
        timing:
          type: object
          properties:
            elapsed_ms:
              type: number
            elapsed_human:
              type: string
            estimated_remaining_ms:
              type: number
              nullable: true
            estimated_remaining_human:
              type: string
              nullable: true
            estimated_completion:
              type: string
              format: date-time
              nullable: true
        metadata:
          type: object
          properties:
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            is_complete:
              type: boolean
            is_active:
              type: boolean

    JobUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/JobStatus'
        progress:
          type: number
          minimum: 0
          maximum: 100
        result:
          type: object
        error:
          type: string

    WebhookConfigResponse:
      type: object
      properties:
        configured:
          type: boolean
        config:
          type: object
          properties:
            url:
              type: string
            events:
              type: array
              items:
                type: string
            active:
              type: boolean
            has_secret:
              type: boolean
            headers:
              type: array
              items:
                type: string
            configured_at:
              type: string
              format: date-time
        supported_events:
          type: array
          items:
            type: string

    WebhookRequest:
      type: object
      properties:
        action:
          type: string
          enum: [configure, test]
        webhook_url:
          type: string
          format: uri
          description: Required for configure action
        events:
          type: array
          items:
            type: string
          description: Required for configure action
        secret:
          type: string
          description: Optional webhook secret for signature verification
        headers:
          type: object
          description: Optional custom headers
      required:
        - action

    WebhookResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        config:
          type: object
        payload:
          type: object

    EscalationListResponse:
      type: object
      properties:
        success:
          type: boolean
        escalations:
          type: array
          items:
            $ref: '#/components/schemas/Escalation'
        pagination:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            total:
              type: integer
            has_more:
              type: boolean
        stats:
          type: object
          properties:
            total:
              type: integer
            pending:
              type: integer
            in_review:
              type: integer
            resolved:
              type: integer
            dismissed:
              type: integer
            by_priority:
              type: object
            by_type:
              type: object
        filters:
          type: object

    Escalation:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/EscalationType'
        priority:
          $ref: '#/components/schemas/Priority'
        title:
          type: string
        description:
          type: string
        context:
          type: object
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
        error_details:
          type: object
        suggested_actions:
          type: array
          items:
            type: string
        related_entities:
          type: object
          properties:
            article_id:
              type: string
            job_id:
              type: string
            user_id:
              type: string
        status:
          $ref: '#/components/schemas/EscalationStatus'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        resolved_at:
          type: string
          format: date-time
        resolved_by:
          type: string
        resolution_notes:
          type: string

    CreateEscalationRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/EscalationType'
        priority:
          $ref: '#/components/schemas/Priority'
        title:
          type: string
        description:
          type: string
        context:
          type: object
        related_entities:
          type: object
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
        error_details:
          type: object
        suggested_actions:
          type: array
          items:
            type: string
      required:
        - type
        - priority
        - title
        - description

    UpdateEscalationRequest:
      type: object
      properties:
        escalation_id:
          type: string
        status:
          $ref: '#/components/schemas/EscalationStatus'
        resolved_by:
          type: string
        resolution_notes:
          type: string
      required:
        - escalation_id
        - status

    EscalationResponse:
      type: object
      properties:
        success:
          type: boolean
        escalation_id:
          type: string
        escalation:
          $ref: '#/components/schemas/Escalation'
        message:
          type: string

    ApiKeyListResponse:
      type: object
      properties:
        success:
          type: boolean
        keys:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              isActive:
                type: boolean
              createdAt:
                type: string
                format: date-time
              lastUsed:
                type: string
                format: date-time
                nullable: true

    CreateApiKeyRequest:
      type: object
      properties:
        name:
          type: string
          description: API key name/description
      required:
        - name

    ApiKeyResponse:
      type: object
      properties:
        success:
          type: boolean
        keyId:
          type: string
        apiKey:
          type: string
          description: The actual API key (only shown once)
        name:
          type: string
        message:
          type: string

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
        - message

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
      required:
        - error

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found - resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Agent Management
    description: Core agent operations and health monitoring
  - name: Content Management
    description: Article creation, editing, and management
  - name: Intelligence
    description: Content discovery and generation operations
  - name: Memory
    description: Agent memory system for semantic and episodic storage
  - name: Job Management
    description: Asynchronous job tracking and monitoring
  - name: Webhook
    description: Event notification configuration
  - name: Escalation
    description: Human oversight and error escalation
  - name: API Keys
    description: API key management and authentication 